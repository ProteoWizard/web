<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>ProteoWizard:Linux Build Instructions</title>

<link href="css/pwiz_structure.css" rel="stylesheet" type="text/css">
<link href="css/pwiz_styles.css" rel="stylesheet" type="text/css">

<script src="SpryAssets/SpryMenuBar.js" type="text/javascript"></script>
<link href="SpryAssets/SpryMenuBarHorizontal.css" rel="stylesheet" type="text/css" />



<style type="text/css">
.indent {
	font-family: "Courier New", Courier, monospace;
	font-size: 14px;
	background-color: #eee;
	text-indent: 15px;
}
</style>
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54926454-1', 'auto');
  ga('send', 'pageview');

</script></head>

<body>

<div class="container">
<!--#include virtual="nav.html" -->

  <div class="content">
    
      
    <!-- Content goes here. -->
    <p><i>These notes describe using the boost-build bjam build tool officially supported by ProteoWizard.  See the <a href="http://proteowizard.sourceforge.net/downloads.shtml">downloads</a> page for information on using semi-official but perhaps more familiar GNU/Autotools build files instead, which include many examples of building programs that use ProteoWizard.</i></p>
    
    <p> MACUSERS - Please note that these instructions mostly work for you as well - however, you will likely need to build using:
    
    	<UL>
        ./quickbuild.sh runtime-link=shared<br />
        or <<br />
        ./quickbuild.sh runtime-link=shared address-model=32 architecture=x86 </BR>
        </UL>
    </p>
    
    
    
    <h1>Building with Proteowizard‬</h1>
    <p>Written by: Jarrett Egertson on 12/15/2010  jegertso &lt;a .t&gt; u.washington.edu</p>
    <h2>Goal</h2>
        <p>The goal of this tutorial is to demonstrate how to incorporate ProteoWizard into a Linux project and use it to read and write data.  It is aimed at Linux users with moderate programming expertise.  Please feel free to add comments below or e-mail me at jegertso &lt;a .t&gt; u.washington.edu</p>
    
    <H2>The Final Product</H2>
     <p><i> A Linux binary called pwiz_example that reads a ProteoWizard-supported file format, outputs the first 5 peaks (m/z and intensity) data from the first two spectra in the file, and then outputs the file as mzML.</i>
    <H4>Delivered to the end-user:</H4>
      <p>The final product delivered to the user will be a .zip archive.  For the user to use the software, they would download the .zip archive, uncompress it, and run one command (sh quickbuild.sh) to build the binary.</p>
      <h4>How you (the developer) will make this happen:</h4>
    <p>We will use the boost-build system to build our project.  The project will contain the ProteoWizard source code in a compressed .tar.gz archive.  When the project is built, the source folder will be decompressed and ProteoWizard code will be built directly into the binary.  There will be a section at the end of this tutorial for advanced users who wish to reference the ProteoWizard SVN repository directly from an SVN project.  By doing this, the ProteoWizard code is automatically updated on SVN check out. (note: I haven't written this section yet)</p>
    <H4>There are two ways to use this tutorial:</H4>
    <P>One is to create the project manually, from scratch following steps 0-6, you will be creating all directories manually, downloading ProteoWizard source code and libraries manually, adding build scripts, and project source code manually.  </P>
    
    <UL>If you'd like to take the easy way out...</p>
    <p>The other way is to follow step 0 of the tutorial, download the complete project <a href="downloads/linuxExample/pwiz_project_example.zip">here</a>:<br />
     <br />
      unzip the file, and run sh quickbuild.sh in the pwiz_project directory.  This should build a binary which will be in pwiz_project/bin</p>
    </UL>
      
    <H2>Step 0: Make sure you have g++ installed</H2>
    <P><i>g++ is the GNU project C and C++ compiler</i><br />
      A lot of Linux distributions come with g++ installed already, but just to be safe...<br />
      The easiest way to check this is to run the command:<br />
    <P class="indent"> &gt; which g++<br /></P>
      <P>If this command returns nothing, you will have to install g++.  Most distributions come with a package manager that can facilitate this installation.</p>
 
    <H2>Step 1: Create the directory structure for the project</H2>
     <P> In this step, we'll create a directory hierarchy for our project, and download the ProteoWizard source code and libraries it depends on.
 	<img src="images/directory_structure.png" />
    </p>
    
    
    <p>The main directory for our project will be called pwiz_project and it will have four subdirectories:<br />
    <UL>
    bin - Compiled binaries will be placed in this directory<br />
      project_src - The source code for our project<br />
      pwiz_libraries - A directory containing all of the libraries ProteoWizard depends on (ex. boost) as well as the source for boost-build itself<br />
      pwiz_src - A directory that will contain the ProteoWizard source code</p>
    </UL> 
    <p>pwiz_project itself will contain two important scripts:<br />
    <UL> 
      <a href="downloads/linuxExample/quickbuild.sh">quickbuild.sh</a> - the user calls this to build the project (ex. sh quickbuild.sh)<br />
      <a href="downloads/linuxExample/clean.sh">clean.sh</a> - the user calls this to clean the project (ex. sh clean.sh)
      </p>
    </UL>
    <p><I>Please make sure the full path to your project does not contain any spaces.</I></p>
    <p>Create these directories.  We'll deal with the bin and project_src directories later, for now, lets prepare the pwiz_libraries and pwiz_src directories.</p>
    <H4>Populate pwiz_libraries</H4>
      <P>We'll access the ProteoWizard svn repository to download the source for the ProteoWizard dependencies and populate the pwiz_libraries directory.<br />
      From the pwiz_project directory:<br />
      <P class="indent"> &gt; svn co https://svn.code.sf.net/p/proteowizard/code/trunk/pwiz/libraries pwiz_libraries/</p>
    <H4>Populate pwiz_src</H4>
     <P> To populate pwiz_src we'll download a compressed .tar.gz archive containing the ProteoWizard source code.  I like to put this archive in the pwiz_project directory, and then have boost-build extract it at build time.  This saves space and, if the project is checked into a source repository, allows for much faster check outs.  <br />
      The source archive can be found from our <a href="downloads.shtml">download</a> page.<br />
      At the time of writing this tutorial, the most recent source archive is<br />
      <span class="inputstyle">pwiz-src-without-ltv-2_1_2416.tar.bz2</span><br />
      I downloaded the archive to my pwiz_project directory.</p>

    <H2>Step 2: Write the source code for your project</H2>
      <p>The project is a pretty simple one, so it will contain one source file called <a href="downloads/linuxExample/pwiz_example.cpp">pwiz_example.cpp</a>.  The file will be located in the pwiz_project/project_src directory.  The source file can be found in the attachments, with comments.  The file can include files from the ProteoWizard source directory, for example, the first line:<br />
   <P class="indent"> #include &quot;pwiz/data/msdata/MSDataFile.hpp&quot;  </p>


    <H2>Step 3: Write the boost-build scripts for your project</H2>
          <P>The boost-build scripts are written in the boost-build language, and are analogous to Makefiles in Linux, but are much more powerful.  The syntax for these files is covered in the boost-build documentation.  We'll write two .jam files.  </P>
          <P>One will be in <span class="inputstyle">pwiz_project/project_src</span> called <a href="downloads/linuxExample/Jamfile.jam">Jamfile.jam</a>.  This file allows the boost-build software to find the necessary libraries and header files for the pwiz_example binary, as well as defining build options such as linking type and threading.  In general, a large project will have many Jamfile's, each directing boost-build on how to build a sub-component of the project.  The ProteoWizard source code contains numerous Jamfiles.</P>
          <P>The second will be in the <span class="inputstyle">pwiz_project</span> directory and is called <a href="downloads/linuxExample/Jamroot.jam">Jamroot.jam</a>.  Each boost-build project must have a Jamroot.jam file at the project root.  This is the file read by boost-build's interpreter (bjam) to determine how to build the entire project.  Our Jamroot.jam file serves two main purposes:</P>
<OL>
      <LI> To extract the ProteoWizard source archive (or determine that it has already been extracted), as well as other source archives in pwiz_libraries<br /></LI>
     
      <LI> To direct boost-build to build and install our pwiz_example program to the bin directory.<br />
          Both of these files are attached at the end of this page separately, as well as being included in the compressed project archive also attached.
     </LI> 
    </OL>
      

    <H2>Step 4: Write a shell script for the user to build the project with</H2>
         <P> At this point, the project could be built if the user had the boost-build system installed on their computer.  The interpreter is called bjam.  However, the source code for bjam is included in the <span class="inputstyle">pwiz_project/pwiz_libraries</span> directory.  A script in <span class="inputstyle">pwiz_project</span>, <a href="downloads/linuxExample/quickbuild.sh">quickbuild.sh</a>, will check to see if bjam has been compiled, and if not, build it.  Then, it will use this copy of bjam to interpret our build scripts from Step 3, and build/install the project.  Arguments passed to quickbuild.sh get passed on to bjam.  For example, to build the project using 4 threads:</p>
 
    <P class="indent">&gt;  sh quickbuild.sh -j4</P>
      <P>quickbuild.sh is attached below separately, and as part of the project archive.</p>

    <H2>Step 5: Write a shell script for the user to clean the project with</H2>
           <P>It is good practice to have a shell script that the user can use to clean the project.  This script is called clean.sh.  This script will be included in pwiz_project</p>

    <H2>Step 6: Build the project!</H2>
      <P>  Everything is now in place, and the project is ready to be built.  If you have not been creating the project manually, you can download the attached project archive, extract it, and run 
      <P class="indent"> &gt; sh quickbuild.sh </P>
      <P>from the pwiz_project directory (make sure you're in pwiz_project, not pwiz_project/pwiz_src !). Then, try running the pwiz_example binary in pwiz_project/bin.</p>
      <P> Download the full example project <a href="downloads/linuxExample/pwiz_project_example.zip">HERE</a></p>

    <!-- End of Content  -->

    
    <!-- end .content -->
</div>
	<div id="sourceforge">
        <a href="http://sourceforge.net"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=216483&type=11" width="120" height="30" border="0" alt="Website hosted by SourceForge.net. Fast, secure and Free Open Source software downloads" /></a>
        <a href="https:/github.com/ProteoWizard/pwiz">
          <svg height="28" viewBox="0 0 10 16" version="1.1" width="40" aria-hidden="true"><path fill-rule="evenodd" fill="white" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path></svg>
          <svg height="30" viewBox="25 0 1 15" version="1.1" width="107" aria-hidden="true"><path fill-rule="evenodd" fill="white" d="M18.53 12.03h-.02c.009 0 .015.01.024.011h.006l-.01-.01zm.004.011c-.093.001-.327.05-.574.05-.78 0-1.05-.36-1.05-.83V8.13h1.59c.09 0 .16-.08.16-.19v-1.7c0-.09-.08-.17-.16-.17h-1.59V3.96c0-.08-.05-.13-.14-.13h-2.16c-.09 0-.14.05-.14.13v2.17s-1.09.27-1.16.28c-.08.02-.13.09-.13.17v1.36c0 .11.08.19.17.19h1.11v3.28c0 2.44 1.7 2.69 2.86 2.69.53 0 1.17-.17 1.27-.22.06-.02.09-.09.09-.16v-1.5a.177.177 0 0 0-.146-.18zm23.696-2.2c0-1.81-.73-2.05-1.5-1.97-.6.04-1.08.34-1.08.34v3.52s.49.34 1.22.36c1.03.03 1.36-.34 1.36-2.25zm2.43-.16c0 3.43-1.11 4.41-3.05 4.41-1.64 0-2.52-.83-2.52-.83s-.04.46-.09.52c-.03.06-.08.08-.14.08h-1.48c-.1 0-.19-.08-.19-.17l.02-11.11c0-.09.08-.17.17-.17h2.13c.09 0 .17.08.17.17v3.77s.82-.53 2.02-.53l-.01-.02c1.2 0 2.97.45 2.97 3.88zm-8.72-3.61H33.84c-.11 0-.17.08-.17.19v5.44s-.55.39-1.3.39-.97-.34-.97-1.09V6.25c0-.09-.08-.17-.17-.17h-2.14c-.09 0-.17.08-.17.17v5.11c0 2.2 1.23 2.75 2.92 2.75 1.39 0 2.52-.77 2.52-.77s.05.39.08.45c.02.05.09.09.16.09h1.34c.11 0 .17-.08.17-.17l.02-7.47c0-.09-.08-.17-.19-.17zm-23.7-.01h-2.13c-.09 0-.17.09-.17.2v7.34c0 .2.13.27.3.27h1.92c.2 0 .25-.09.25-.27V6.23c0-.09-.08-.17-.17-.17zm-1.05-3.38c-.77 0-1.38.61-1.38 1.38 0 .77.61 1.38 1.38 1.38.75 0 1.36-.61 1.36-1.38 0-.77-.61-1.38-1.36-1.38zm16.49-.25h-2.11c-.09 0-.17.08-.17.17v4.09h-3.31V2.6c0-.09-.08-.17-.17-.17h-2.13c-.09 0-.17.08-.17.17v11.11c0 .09.09.17.17.17h2.13c.09 0 .17-.08.17-.17V8.96h3.31l-.02 4.75c0 .09.08.17.17.17h2.13c.09 0 .17-.08.17-.17V2.6c0-.09-.08-.17-.17-.17zM8.81 7.35v5.74c0 .04-.01.11-.06.13 0 0-1.25.89-3.31.89-2.49 0-5.44-.78-5.44-5.92S2.58 1.99 5.1 2c2.18 0 3.06.49 3.2.58.04.05.06.09.06.14L7.94 4.5c0 .09-.09.2-.2.17-.36-.11-.9-.33-2.17-.33-1.47 0-3.05.42-3.05 3.73s1.5 3.7 2.58 3.7c.92 0 1.25-.11 1.25-.11v-2.3H4.88c-.11 0-.19-.08-.19-.17V7.35c0-.09.08-.17.19-.17h3.74c.11 0 .19.08.19.17z"></path></svg>
        </a>
	</div>

    
    
  <!-- end .container --></div>
<script type="text/javascript">
var MenuBar1 = new Spry.Widget.MenuBar("MenuBar1", {imgDown:"SpryAssets/SpryMenuBarDownHover.gif", imgRight:"SpryAssets/SpryMenuBarRightHover.gif"});
</script>
</body>
</html>
